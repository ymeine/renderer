require! {
	std
	oop

	'renderer'
}

{oop} = oop

{Renderer} = renderer



MediaWiki = oop.Class {
	name: 'MediaWiki'
	parent: Renderer

	desc:
		short: '''A MediaWiki renderer'''

	init: ->
		@@@superclass.call @, {
			emphaseChar: '\''
			italicX: 2
			boldX: 3
		}

	statics:
		escapeMap: {
			'%20': /\ /g
			'%3D': /\=/g
			'%5B': /\[/g
			'%5D': /\]/g
		}

	methods:
		########################################################################
		# Section
		########################################################################

		section: (title, level) ->
			# Input arguments processing ---------------------------------------

			# ------------------------------------------------------------ level
			level ?= 1

			# Processing -------------------------------------------------------

			# ------------------------------------------------------------ marks
			marks = '=' * level
			# ----------------------------------------------------------- output
			output = "#marks #title #marks"

			# Return -----------------------------------------------------------

			output



		########################################################################
		# List
		########################################################################

		list-item: (text, ordered, level) ->
			# Input arguments processing ---------------------------------------

			# ---------------------------------------------------------- ordered
			ordered ?= no
			# ------------------------------------------------------------ level
			level ?= 1

			# Processing -------------------------------------------------------

			# ----------------------------------------------------------- prefix
			prefix = (if not ordered => '*' else '#') * level
			# ----------------------------------------------------------- output
			output = "#prefix #text"

			# Return -----------------------------------------------------------

			output



		########################################################################
		# Links
		########################################################################

		escapeUrl: (url) ->
			# Processing -------------------------------------------------------

			output = url

			for substitute, pattern of @@@escapeMap
				output .= replace pattern, substitute

			# Return -----------------------------------------------------------

			output

		url: (url, text) ->
			# Input arguments processing ---------------------------------------

			# ------------------------------------------------------------- text
			text ?= url

			# Processing -------------------------------------------------------

			# -------------------------------------------------------------- url
			url = @escapeUrl url
			# ----------------------------------------------------------- output
			output = "[#url #text]"

			# Return -----------------------------------------------------------

			output

		link: (page, text) ->
			# Input arguments processing ---------------------------------------
			text ?= page

			# Processing -------------------------------------------------------

			output = "[[#page|#text]]"

			# Return -----------------------------------------------------------

			output
}



std.packager.export {
	module

	values: [
		{
			value: MediaWiki
			names: <[
				MediaWiki
				Mediawiki
				MW
			]>
		}
	]
}
