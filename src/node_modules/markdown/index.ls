require! {
	std
	oop

	'renderer'
}

{string} = std
{oop} = oop

{Renderer} = renderer



Markdown = oop.Class {
	name: 'Markdown'
	parent: Renderer

	desc: '''A Markdown renderer'''

	init: ->
		@ <<< {
			emphaseChar: '_'
			italicX: 1
			boldX: 2
		}

	statics:
		escapeMap: {
			'%28': /\(/g
			'%29': /\)/g
		}

	methods:
		########################################################################
		# Section
		########################################################################

		section: (title, level) ->
			# Input arguments processing ---------------------------------------

			# ------------------------------------------------------------ level
			level ?= 1

			# Processing -------------------------------------------------------

			# ----------------------------------------------------------- prefix
			prefix = '#' * level
			# ----------------------------------------------------------- output
			output = "#prefix #title"

			# Return -----------------------------------------------------------

			output



		########################################################################
		# List
		########################################################################

		list-item: (text, ordered, level) ->
			# Input arguments processing ---------------------------------------

			# ---------------------------------------------------------- ordered
			ordered ?= no
			# ------------------------------------------------------------ level
			level ?= 1

			# Processing -------------------------------------------------------

			# ----------------------------------------------------------- prefix
			prefix = '\t' * (level - 1)
			prefix += if not ordered => '*' else '1.'
			# ----------------------------------------------------------- output
			output = "#prefix #text"

			# Return -----------------------------------------------------------

			output



		########################################################################
		# Links
		########################################################################

		escapeUrl: (url) ->
			# Processing -------------------------------------------------------

			output = url

			for substitute, pattern of @@@escapeMap
				output .= replace pattern, substitute

			# Return -----------------------------------------------------------

			output

		url: (url, text, title) ->
			# Input arguments processing ---------------------------------------

			# ------------------------------------------------------------- text
			text ?= url
			# ------------------------------------------------------------ title
			title ?= text

			# Processing -------------------------------------------------------

			# -------------------------------------------------------------- url
			url = @escapeUrl url
			# ------------------------------------------------------------- text
			text = string.escape text, '[]'
			# ------------------------------------------------------------ title
			# No need to escape apparently
			# ----------------------------------------------------------- output

			output = "[#text](#url \"#title\")"

			# Return -----------------------------------------------------------

			output
}



std.packager.export {
	module

	values: [
		{
			value: Markdown
			names: <[
				Markdown
				MD
			]>
		}
	]
}
